#!/bin/zsh

# Constants
readonly AGENT_SOCKET="$HOME/.ssh/.ssh-agent-socket"
readonly AGENT_INFO="$HOME/.ssh/.ssh-agent-info"

# Color definitions
reset="\033[0m"
bold="\033[1m"
red="\033[31m"
green="\033[32m"
yellow="\033[33m"
blue="\033[34m"

# Detect only the architecture
detect_architecture() {
    local arch=$(uname -m)
    case "$arch" in
        x86_64) echo 'x86_64' ;;
        aarch64|arm64) echo 'arm64' ;;  # Handle both identifiers for ARM64
        *) echo 'unknown' ;;
    esac
}

# Detect shell platform
detect_shell_platform() {
    case "$OSTYPE" in
        linux*) echo 'LINUX' ;;
        darwin*) echo 'OSX' ;;
        freebsd*) echo 'BSD' ;;
        cygwin*) echo 'CYGWIN' ;;
        *) echo 'OTHER' ;;
    esac
}

# History management
setup_history() {
    # Path to the history file
    export HISTFILE="$HOME/.zsh_history"

    # Number of commands to save in the history file
    export HISTSIZE=1000000
    export SAVEHIST=1000000

    # Options to manage how history is stored and shared
    setopt SHARE_HISTORY          # Share history between all sessions
    setopt INC_APPEND_HISTORY_TIME
    setopt HIST_EXPIRE_DUPS_FIRST # Expire duplicate entries first when trimming history
    setopt HIST_REDUCE_BLANKS     # Remove superfluous blanks before saving entry
    setopt HIST_IGNORE_ALL_DUPS   # Ignore duplicated entries
    setopt HIST_IGNORE_SPACE      # Don't record an entry starting with a space
    setopt HIST_FIND_NO_DUPS      # Do not display duplicates in history search
    setopt HIST_VERIFY            # Show command with history expansion to user before running it
}


# Handles the initialization and maintenance of an SSH agent to manage SSH keys.
handle_ssh_agent() {
    local ssh_agent_info="$HOME/.ssh/.ssh-agent-info"
    local agent_socket="$HOME/.ssh/.ssh-agent-socket"

    # Load existing agent configuration if available
    if [[ -s "$ssh_agent_info" ]]; then
        source "$ssh_agent_info"
    fi

    # Check if SSH agent needs restarting
    if ! ssh-add -l &>/dev/null || [[ ! -S "$agent_socket" ]]; then
        restart_ssh_agent "$agent_socket" "$ssh_agent_info"
    fi
}

# Restarts the SSH agent and updates the agent information files
restart_ssh_agent() {
    local agent_socket=$1
    local agent_info_file=$2

    # Ensure old sockets are removed for security
    [[ -S "$agent_socket" ]] && rm "$agent_socket"

    # Start new SSH agent and save its configuration
    echo "Starting new SSH agent..."
    ssh-agent -a "$agent_socket" > "$agent_info_file"
    source "$agent_info_file"
    ssh-add
}

# Update PS1 prompt
update_ps1() {
    local os_type=$(detect_shell_platform)
    local arch_type=$(detect_architecture)
    local platform_cmd="${os_type}-${arch_type}"
    local powerline_cmd

    case "$platform_cmd" in
        OSX-x86_64) powerline_cmd="$HOME/bin/powerline-go-darwin-amd64" ;;
        OSX-arm64) powerline_cmd="$HOME/bin/powerline-go-darwin-arm64" ;;
        LINUX-arm64) powerline_cmd="$HOME/bin/powerline-go-linux-arm64" ;;
        LINUX-x86_64) powerline_cmd="$HOME/bin/powerline-go-linux-amd64" ;;
    esac

    # Check if the powerline_cmd is executable
    if [[ -n "$powerline_cmd" ]] && [[ -x "$powerline_cmd" ]]; then
        PS1="$($powerline_cmd -error $? -jobs $(jobs -p | wc -l))"
    else
        echo "Error: powerline-go command not found or not executable at $powerline_cmd"
        PS1="[%n@%m %~]%# "
    fi
}


# Sets up the general environment variables and configurations.
setup_environment() {
    setup_path
    setup_locale
    setup_editors
    setup_misc
    setup_fzf
    setup_intu_alias

    # Show Neovim tip on shell start
    # Only show tip 20% of the time to avoid being too intrusive
    #if (( RANDOM % 5 == 0 )); then
    #    show_nvim_tip
    #fi
    show_nvim_tip
}

# Configures system and user paths.
setup_path() {
    local system_paths=("/usr/local/bin" "/usr/local/go/bin")
    local user_paths=("$HOME/bin" "$HOME/.local/bin")
    local os_type=$(detect_shell_platform)

    if [[ "$os_type" == "OSX" ]]; then
        path=($(/opt/homebrew/bin/brew --prefix)/bin $(/opt/homebrew/bin/brew --prefix)/sbin $path)
    else
        path=($path $HOME/bin /usr/local/bin $HOME/.local/bin /usr/local/go/bin)
    fi
}

# Sets up locale and timezone settings.
setup_locale() {
    export LC_ALL="en_US.UTF-8"
    export LANG="en_US.UTF-8"
    export TZ="US/Pacific"
}

# Configures default editors and related settings.
setup_editors() {
    export EDITOR="vim -f"
    export P4EDITOR="$EDITOR"
    export VISUAL="$EDITOR"
}

# Miscellaneous environment settings.
setup_misc() {
    export VAGRANT_DEFAULT_PROVIDER="aws"
    export GCC_COLORS="error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01"
    export ENV_DISABLE_DONATION_MSG=1
}

setup_fzf() {
    local os_type=$(detect_shell_platform)
    local arch_type=$(detect_architecture)
    local platform_cmd="${os_type}-${arch_type}"
    local fzf_cmd
    local common_fzf_link="$HOME/bin/fzf"

    case "$platform_cmd" in
        OSX-x86_64) fzf_cmd="$HOME/bin/fzf-darwin-amd64" ;;
        OSX-arm64) fzf_cmd="$HOME/bin/fzf-darwin-arm64" ;;
        LINUX-arm64) fzf_cmd="$HOME/bin/fzf-linux-arm64" ;;
        LINUX-x86_64) fzf_cmd="$HOME/bin/fzf-linux-amd64" ;;
    esac

    # Check if the specific binary exists and is executable
    if [[ -n "$fzf_cmd" ]] && [[ -x "$fzf_cmd" ]]; then
        # Only create symlink if it does not already exist or points to a different target
        if [[ ! -L "$common_fzf_link" ]] || [[ "$(readlink -- "$common_fzf_link")" != "$fzf_cmd" ]]; then
            ln -sf "$fzf_cmd" "$common_fzf_link"
        fi
    fi
}

setup_intu_alias() {
    local os_type=$(detect_shell_platform)
    local arch_type=$(detect_architecture)
    local platform_cmd="${os_type}-${arch_type}"
    local intu_cmd
    local common_intu_link="$HOME/bin/intu"

    case "$platform_cmd" in
        OSX-x86_64) intu_cmd="$HOME/bin/intu-darwin-amd64" ;;
        OSX-arm64) intu_cmd="$HOME/bin/intu-darwin-arm64" ;;
        LINUX-arm64) intu_cmd="$HOME/bin/intu-linux-arm64" ;;
        LINUX-x86_64) intu_cmd="$HOME/bin/intu-linux-amd64" ;;
        *)
            echo "Unsupported platform for intu: $platform_cmd"
            return 1
            ;;
    esac

    # Check if the specific binary exists and is executable
    if [[ -n "$intu_cmd" ]] && [[ -x "$intu_cmd" ]]; then
        # Only create symlink if it does not already exist or points to a different target
        if [[ ! -L "$common_intu_link" ]] || [[ "$(readlink -- "$common_intu_link")" != "$intu_cmd" ]]; then
            ln -sf "$intu_cmd" "$common_intu_link"
        fi
        alias intu="$common_intu_link"
        echo "intu alias has been set to use $intu_cmd"
    else
        echo "intu binary not found or not executable at $intu_cmd"
        return 1
    fi
}

# Function to set up the clipboard alias
setup_clipboard_alias() {
    local os_type=$(detect_shell_platform)
    local clip_cmd

    case "$os_type" in
        OSX)
            clip_cmd="pbcopy"
            ;;
        LINUX)
            if command -v xclip &>/dev/null; then
                clip_cmd="xclip -selection clipboard"
            elif command -v xsel &>/dev/null; then
                clip_cmd="xsel --clipboard --input"
            elif command -v clip.exe &>/dev/null; then
                # This is for Windows Subsystem for Linux (WSL)
                clip_cmd="clip.exe"
            else
                echo "No suitable clipboard command found. Please install xclip or xsel."
                return 1
            fi
            ;;
        CYGWIN)
            clip_cmd="clip.exe"
            ;;
        *)
            echo "Unsupported operating system for clipboard operations."
            return 1
            ;;
    esac

    if [[ -n "$clip_cmd" ]]; then
        alias clip="$clip_cmd"
        echo "Clipboard alias 'clip' has been set to use '$clip_cmd'"
    else
        echo "Failed to set clipboard alias."
        return 1
    fi
}

# GOPATH setup
setup_gopath() {
    if [[ -z "$GOPATH" ]]; then
        export GOPATH="$HOME/workspace/go"
        mkdir -p "$GOPATH"
        path=($path $GOPATH/bin)
        export GOPROXY="https://proxy.golang.org,direct"
    fi
}

# Platform-specific aliases and setup
setup_platform_specific() {
    local os_type=$(detect_shell_platform)

    case "$os_type" in
        OSX)
            export HOMEBREW_NO_ANALYTICS=1
            #alias slock='pmset displaysleepnow && ssh 172.17.122.15 "DISPLAY=:0 slock"'
            alias brew="/opt/homebrew/bin/brew"
            if (( $+commands[brew] )) && [[ -r "$(brew --prefix)/share/zsh/site-functions/_brew" ]]; then
                fpath=($fpath $(brew --prefix)/share/zsh/site-functions)
                autoload -Uz compinit && compinit
            fi
            path=($path $(brew --prefix)/sbin $(brew --prefix)/bin $HOME/bin)
            alias ls="gls --color=auto"
            if [[ -r "$HOME/.iterm2_shell_integration.zsh" ]]; then
                source "$HOME/.iterm2_shell_integration.zsh"
            fi

            # Set up JAVA_HOME for Homebrew-installed openjdk@17 on macOS
            local brew_java_home="$(/opt/homebrew/bin/brew --prefix openjdk@17)"
            if [[ -d "$brew_java_home" ]]; then
                export JAVA_HOME="$brew_java_home"
                path=($JAVA_HOME/bin $path)
            fi
            ;;
        LINUX)
            export NO_AT_BRIDGE=1
            alias open="xdg-open"
            alias ls="ls --color=auto"
            if [[ -x "/usr/bin/dircolors" ]]; then
                if [[ -r "$HOME/.dircolors" ]]; then
                    eval "$(dircolors -b "$HOME/.dircolors")"
                else
                    eval "$(dircolors -b)"
                fi
                alias ls="ls --color=auto"
                alias grep="grep --color=auto"
                alias fgrep="fgrep --color=auto"
                alias egrep="egrep --color=auto"
            fi
            export GCC_COLORS="error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01"
            ;;
    esac
}

git_cleanup() {
    git fetch --prune
    git branch --merged | grep -v "\*" | xargs -n 1 git branch -d
}

docker_cleanup() {
    docker system prune -af
    docker volume prune -f
}

# Aliases

# Setup Neovim aliases if available
setup_nvim_alias() {
    # Check if nvim is installed
    if command -v nvim >/dev/null 2>&1; then
        alias vim='nvim'
        alias vi='nvim'
        export EDITOR='nvim'
        export VISUAL='nvim'
        echo "Neovim aliases set up successfully"
    fi
}

setup_aliases() {
    alias history="history 1" # behave more like bash
    alias gclean="git_cleanup"
    alias dclean="docker_cleanup"
    alias grep="grep --color=auto -d skip"
    alias grpe="grep --color=auto -d skip"
    alias screen="tmux"
    alias ssh="ssh -A -o StrictHostKeyChecking=accept-new -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -o ConnectTimeout=10 -o VisualHostKey=yes -o IdentitiesOnly=yes"
    alias nsr="netstat -rn"
    alias nsa="netstat -an | sed -n '1,/Active UNIX domain sockets/p'"
    alias lsock="sudo /usr/sbin/lsof -i -P"
    alias keypress="read -s -n1 keypress; echo \$keypress"
    alias loadenv='export $(grep -v "^#" .env | xargs)'
    alias :="cd .."
    alias ::="cd ../.."
    alias :::="cd ../../.."
    alias ::::="cd ../../../.."
    alias :::::="cd ../../../../.."
    alias ::::::="cd ../../../../../.."
    setup_nvim_alias
}

# Functions
man() {
    env \
        LESS_TERMCAP_md=$'\e[1;36m' \
        LESS_TERMCAP_me=$'\e[0m' \
        LESS_TERMCAP_se=$'\e[0m' \
        LESS_TERMCAP_so=$'\e[1;40;92m' \
        LESS_TERMCAP_ue=$'\e[0m' \
        LESS_TERMCAP_us=$'\e[1;32m' \
        man "$@"
}

http_headers() {
    /usr/bin/curl -I -L "$@"
}

sshtunnel() {
    if [[ $# -ne 3 ]]; then
        echo "usage: sshtunnel host remote-port local_port"
    else
        /usr/bin/ssh "$1" -L "$3":localhost:"$2"
    fi
}

# Function to cat files and conditionally copy content to the clipboard based on the OS
catfiles() {
    local os_type=$(detect_shell_platform)
    local clip_cmd
    local all_contents=""
    local pattern="*"
    local recursive=false
    local use_find=false
    local use_json=false
    local json_output='{}'
    local temp_file=$(mktemp)
    local python_script=$(mktemp)

    # Parse options
    while getopts "rp:j" opt; do
        case ${opt} in
            r ) recursive=true; use_find=true ;;
            p ) pattern=$OPTARG; use_find=true ;;
            j ) use_json=true ;;
            \? ) echo "Usage: catfiles [-r] [-p pattern] [-j] [directory or files...]"; return 1 ;;
        esac
    done
    shift $((OPTIND -1))

    # Determine the appropriate clipboard command based on the platform
    case "$os_type" in
        OSX)
            clip_cmd="pbcopy"
            ;;
        LINUX)
            if command -v clip.exe &>/dev/null; then
                clip_cmd="clip.exe"
            elif command -v xclip &>/dev/null; then
                clip_cmd="xclip -selection clipboard"
            elif command -v xsel &>/dev/null; then
                clip_cmd="xsel --clipboard --input"
            else
                clip_cmd=""
            fi
            ;;
        *)
            clip_cmd=""
            ;;
    esac

    # Create Python script
    cat << 'EOF' > "$python_script"
import json
import sys

def escape_string(s):
    return s.encode("unicode_escape").decode("utf-8").replace('"', '\"')

try:
    data = json.loads(sys.stdin.read())
    file_content = sys.argv[1]
    file_content = escape_string(file_content)
    file_data = {
        "filename": sys.argv[2],
        "relative_path": sys.argv[3],
        "file_size": sys.argv[4],
        "last_modified": sys.argv[5],
        "file_type": sys.argv[6],
        "line_count": int(sys.argv[7]),
        "file_extension": sys.argv[8],
        "md5_checksum": sys.argv[9],
        "content": file_content
    }
    data[sys.argv[3]] = file_data
    print(json.dumps(data, indent=2))
except Exception as e:
    print(json.dumps({"error": str(e)}), file=sys.stderr)
    sys.exit(1)
EOF

    # Function to process a single file
    process_file() {
        local file="$1"
        if [[ -f "$file" ]]; then
            local file_size=$(du -h "$file" | cut -f1)
            local last_modified=$(date -r "$file" "+%Y-%m-%d %H:%M:%S")
            local file_type=$(file -b "$file")
            local line_count=$(wc -l < "$file")
            local file_extension="${file##*.}"
            local full_path=$(realpath "$file")
            local relative_path=$(echo "$full_path" | sed "s|^$PWD/||")

            # Cross-platform MD5 checksum calculation
            local checksum
            if [[ "$os_type" == "OSX" ]]; then
                checksum=$(md5 -q "$file")
            else
                checksum=$(md5sum "$file" | cut -d' ' -f1)
            fi

            local file_content=$(<"$file")

            if $use_json; then
                python3 "$python_script" "$file_content" "$file" "$relative_path" "$file_size" "$last_modified" "$file_type" "$line_count" "$file_extension" "$checksum" <<< "$json_output" > "$temp_file"
                if [ $? -eq 0 ]; then
                    json_output=$(<"$temp_file")
                else
                    echo "Error processing file: $file" >&2
                    cat "$temp_file" >&2
                fi
            else
                all_contents+="
--- File Metadata ---
"
                all_contents+="Filename: $file
"
                all_contents+="Relative Path: $relative_path
"
                all_contents+="File Size: $file_size
"
                all_contents+="Last Modified: $last_modified
"
                all_contents+="File Type: $file_type
"
                all_contents+="Line Count: $line_count
"
                all_contents+="File Extension: $file_extension
"
                all_contents+="MD5 Checksum: $checksum
"
                all_contents+="--- File Contents ---
"
                all_contents+="$file_content

"
            fi
            echo "Filename: $file processed."
        else
            echo "Error: File $file does not exist or is a directory."
        fi
    }

    # Use find if recursive or pattern is specified, otherwise process arguments as files
    if $use_find; then
        local search_dir="${1:-.}"
        local find_cmd="find \"$search_dir\""
        if ! $recursive; then
            find_cmd+=" -maxdepth 1"
        fi
        find_cmd+=" -type f -name \"$pattern\""

        eval $find_cmd | while read -r file; do
            process_file "$file"
        done
    else
        # If no files specified, use current directory
        if [[ $# -eq 0 ]]; then
            for file in *(.); do  # This glob qualifier '(.)' ensures only regular files are matched
                process_file "$file"
            done
        else
            for file in "$@"; do
                process_file "$file"
            done
        fi
    fi

    # Finalize output
    if $use_json; then
        all_contents=$json_output
    fi

    # Pipe accumulated content to clipboard command or print to terminal
    if [[ -n $clip_cmd && -n "$all_contents" ]]; then
        echo "$all_contents" | $clip_cmd
        echo "All file contents copied to clipboard."
    elif [[ -n "$all_contents" ]]; then
        echo "$all_contents"
    else
        echo "No files were processed."
    fi

    # Clean up
    rm -f "$temp_file" "$python_script"
}

# Shell options
setup_shell_options() {
    setopt interactive_comments
    setopt long_list_jobs
    setopt prompt_subst
    setopt rm_star_silent
}

# Dircolors setup
setup_dircolors() {
    if [[ "$TERM" != "dumb" ]]; then
        local dircolors_cmd="$(whence gdircolors 2>/dev/null || whence dircolors 2>/dev/null)"
        local dir_colors="$HOME/.dircolors"
        if [[ -x "$dircolors_cmd" ]] && [[ -r "$dir_colors" ]]; then
            eval "$($dircolors_cmd -b "$dir_colors")"
        elif [[ -x "$dircolors_cmd" ]]; then
            eval "$($dircolors_cmd -b)"
        else
            echo "No dircolors command found, using default LS_COLORS"
        fi
        alias grep="grep --color=auto"
        alias fgrep="fgrep --color=auto"
        alias egrep="egrep --color=auto"
    fi
}

# Readline setup
setup_readline() {
    # Enable vi command mode
    bindkey -v

    # Basic navigation bindings
    bindkey '^A' beginning-of-line
    bindkey '^E' end-of-line
    bindkey '^D' delete-char
    bindkey '^L' clear-screen

    # History search bindings
    bindkey '^R' history-incremental-search-backward
    bindkey '^\e[A' up-line-or-search
    bindkey '^\e[B' down-line-or-search
}

# Completions
setup_completions() {
    autoload -Uz compinit
    compinit

    # Command specific completions
    compdef _command command
    compdef _signal kill
    compdef _user finger pinky

    # Directory handling completions
    compdef _directories cd
    compdef _directories pushd
    compdef _directories mkdir
    compdef _directories rmdir

    # File and job handling completions
    compdef _files ln chmod chown chgrp
    compdef _jobs fg bg disown jobs
}


# pyenv setup
setup_pyenv() {
    export PYENV_ROOT="$HOME/.pyenv"
    if [[ -d "$PYENV_ROOT/bin" ]] && [[ -x "$PYENV_ROOT/bin/pyenv" ]]; then
        path=($PYENV_ROOT/bin $path)
        eval "$(pyenv init -)"
    fi
}

# Function to load environment variables from a .env file and print their names
loadenv() {
    if [ -f ".env" ]; then
        echo "Loading environment variables:"
        while IFS= read -r line || [[ -n "$line" ]]; do
            if [[ ! "$line" =~ ^# && "$line" =~ ^[A-Za-z_][A-Za-z0-9_]*= ]]; then
                varname=${line%%=*}
                export "$line"
                echo "Loaded: $varname"
            fi
        done < .env
        echo "All environment variables loaded successfully."
    else
        echo "Error: .env file does not exist in the current directory."
    fi
}

# Check and add cron job for backing up shell history
ensure_cron_job_exists() {
    local cron_job="0 0 * * 0 . $HOME/.zshrc; backup_shell_history"
    if ! crontab -l | grep -Fq "$cron_job"; then
        (crontab -l 2>/dev/null; echo "$cron_job") | crontab -
    fi
}

# Backup shell history
backup_shell_history() {
    local backup_dir="$HOME/.shell_history_backups"
    mkdir -p "$backup_dir"
    local timestamp=$(date +"%Y%m%d%H%M%S")
    tar -czf "$backup_dir/zsh_history_$timestamp.tar.gz" -C "$HOME" .zsh_history
}

notify_mac() {
    local title="$1"
    local message="$2"
    osascript -e "display notification \"$message\" with title \"$title\""
}

notify_linux() {
    local title="$1"
    local message="$2"
    notify-send "$title" "$message"
}

notify_windows() {
    local title="$1"
    local message="$2"
    powershell -Command "& {Add-Type -AssemblyName PresentationFramework; [System.Windows.MessageBox]::Show('$message', '$title')}"
}

notify_cross_platform() {
    local title="$1"
    local message="$2"
    if command -v zenity &> /dev/null; then
        zenity --info --title="$title" --text="$message"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        osascript -e "display notification \"$message\" with title \"$title\""
    elif command -v notify-send &> /dev/null; then
        notify-send "$title" "$message"
    elif command -v powershell &> /dev/null; then
        powershell -Command "& {Add-Type -AssemblyName PresentationFramework; [System.Windows.MessageBox]::Show('$message', '$title')}"
    else
        echo "Notification not supported on this OS."
    fi
}

notify_shell_status() {
    # Temporarily disable job notifications
    setopt local_options NO_NOTIFY NO_MONITOR

    # Get platform info first since we need it immediately
    local os_type=$(detect_shell_platform)
    local arch_type=$(detect_architecture)
    local cpu_info=""
    local memory_info=""
    local memory_usage=""
    local cpu_cores=""
    local cpu_load=""

    # Start system info gathering in background with output redirection
    {
        case "$os_type" in
            OSX)
                cpu_info=$(sysctl -n machdep.cpu.brand_string)
                memory_info=$(($(sysctl -n hw.memsize) / 1024 / 1024))"MB"
                memory_usage=$(vm_stat | awk '
                    /Pages active/ {active=$3}
                    /Pages wired/ {wired=$3}
                    /Pages occupied/ {occupied=$3}
                    END {
                        used=(active + wired + occupied) * 4096
                        total='$(sysctl -n hw.memsize)'
                        printf "%.1f%%", used/total*100
                    }' | sed 's/\.0%/%/')
                cpu_cores=$(sysctl -n hw.ncpu)
                cpu_load=$(sysctl -n vm.loadavg | awk '{printf "%.1f", $2}')
                ;;
            LINUX)
                cpu_info=$(grep "model name" /proc/cpuinfo | head -1 | cut -d':' -f2 | sed 's/^[ \t]*//')
                memory_info=$(($(grep MemTotal /proc/meminfo | awk '{print $2}') / 1024))"MB"
                memory_usage=$(free | awk '/Mem:/ {printf "%.1f%%", $3/$2 * 100}')
                cpu_cores=$(nproc)
                cpu_load=$(uptime | awk -F'[a-z]:' '{print $2}' | awk -F',' '{printf "%.1f", $1}')
                ;;
        esac
        # Store results in temporary files
        echo "$cpu_info" > /tmp/cpu_info.$$
        echo "$memory_info" > /tmp/memory_info.$$
        echo "$memory_usage" > /tmp/memory_usage.$$
        echo "$cpu_cores" > /tmp/cpu_cores.$$
        echo "$cpu_load" > /tmp/cpu_load.$$
    } >/dev/null 2>&1 &

    # Display ASCII logo while gathering info
    gum style \
        --align center \
        --width 70 \
        --border double \
        --margin "1" \
        --padding "1" \
        --foreground 212 \
"░▒▓█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█▓▒░
░▒▓█  ▄█ █▄  █ ▄▀▀▀▀█ █      █   █ ▀▄  ▄▀  █▓▒░
░▒▓█   █ █ █ █ █▄▄▄▄  █      █   █  ▀▄▄▀   █▓▒░
░▒▓█   █ █ █ █ █      █      █   █   ▄▀▄   █▓▒░
░▒▓█  ▄█ █  ██ █      █▄▄▄▄  █▄▄▄█ ▄▀  ▀▄  █▓▒░
░▒▓█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█▓▒░
  ╔═-» [ Terminal Underground Division ] «-═╗
  ║    [×] proudly serving the scene [×]    ║
  ╚════-» [ fido.net.scene.2024.MAIN ] «-═══╝" \
      "$(gum style --foreground 99 'DISTRIBUTION NODE: 4:920/35')"

    # Wait for background process to complete
    wait >/dev/null 2>&1

    # Read the gathered information
    cpu_info=$(cat /tmp/cpu_info.$$ 2>/dev/null)
    memory_info=$(cat /tmp/memory_info.$$ 2>/dev/null)
    memory_usage=$(cat /tmp/memory_usage.$$ 2>/dev/null)
    cpu_cores=$(cat /tmp/cpu_cores.$$ 2>/dev/null)
    cpu_load=$(cat /tmp/cpu_load.$$ 2>/dev/null)

    # Clean up temporary files
    rm -f /tmp/cpu_info.$$ /tmp/memory_info.$$ /tmp/memory_usage.$$ /tmp/cpu_cores.$$ /tmp/cpu_load.$$ 2>/dev/null

    # Display system information with gathered values
    gum style \
        --width 70 \
        --border normal \
        --margin "1 0" \
        --padding "1" \
        "$(gum style --bold --foreground 212 'SYSTEM INFO')" \
        "$(gum style --foreground 99 "×þ System     [ $(uname -s) ]")" \
        "$(gum style --foreground 99 "×þ Platform   [ $os_type ]")" \
        "$(gum style --foreground 99 "×þ Arch       [ $arch_type ]")" \
        "$(gum style --foreground 99 "×þ Release    [ $(date +%Y-%m-%d) ]")" \
        "$(gum style --foreground 99 "×þ CPU        [ $cpu_info ]")" \
        "$(gum style --foreground 99 "×þ Cores      [ $cpu_cores ]")" \
        "$(gum style --foreground 99 "×þ Load       [ $cpu_load ]")" \
        "$(gum style --foreground 99 "×þ Memory     [ $memory_info ]")" \
        "$(gum style --foreground 99 "×þ Mem Usage  [ $memory_usage ]")"

    # Show recommendations for critical issues
    if [[ "${memory_usage%\%}" -gt 90 || $(echo "$cpu_load > $cpu_cores" | bc -l) -eq 1 ]]; then
        gum style \
            --width 70 \
            --border normal \
            --margin "1 0" \
            --padding "1" \
            "$(gum style --bold --foreground 212 'RECOMMENDATIONS')" \
            "$(provide_quick_recommendations)"
    fi
}

# Recommendations function remains the same
provide_quick_recommendations() {
    local recommendations=()

    if [[ "${memory_usage%\%}" -gt 90 ]]; then
        recommendations+=("- High memory usage detected. Consider closing unnecessary applications.")
    fi

    if [[ $(echo "$cpu_load > $cpu_cores" | bc -l) -eq 1 ]]; then
        recommendations+=("- High CPU load detected. Check for resource-intensive processes.")
    fi

    if [[ ${#recommendations[@]} -gt 0 ]]; then
        printf "%s\n" "${recommendations[@]}"
    else
        echo "  Your system appears to be in good health. No specific recommendations at this time."
    fi
}

check_new_mail() {
    if [[ -n "$(find /var/mail -type f -newer ~/.last_mail_check 2>/dev/null)" ]]; then
        echo -e "  ${yellow}New Mail:${reset} Yes ${red}(Action: Check your mail)${reset}" > /tmp/shell_status_mail
    else
        echo -e "  ${yellow}New Mail:${reset} No" > /tmp/shell_status_mail
    fi
}

check_ssh_agent() {
    if [[ -n "$SSH_AGENT_PID" ]]; then
        echo -e "  ${yellow}SSH Agent:${reset} Running (PID: $SSH_AGENT_PID)" > /tmp/shell_status_ssh
    else
        echo -e "  ${yellow}SSH Agent:${reset} Not Running ${red}(Action: Start SSH agent)${reset}" > /tmp/shell_status_ssh
    fi
}

check_fzf_setup() {
    if [[ -x "$HOME/bin/fzf" ]]; then
        echo -e "  ${yellow}fzf Setup:${reset} Properly Set Up" > /tmp/shell_status_fzf
    else
        echo -e "  ${yellow}fzf Setup:${reset} Not Set Up ${red}(Action: Install fzf)${reset}" > /tmp/shell_status_fzf
    fi
}

check_cron_job() {
    if crontab -l 2>/dev/null | grep -Fq "backup_shell_history"; then
        echo -e "  ${yellow}History Backup Cron:${reset} Exists" > /tmp/shell_status_cron
    else
        echo -e "  ${yellow}History Backup Cron:${reset} Not Found ${red}(Action: Set up backup cron job)${reset}" > /tmp/shell_status_cron
    fi
}

check_system_load() {
    local os_type=$(detect_shell_platform)
    local load
    local cores
    local load_per_core

    if [[ "$os_type" == "OSX" ]]; then
        load=$(sysctl -n vm.loadavg | awk '{print $2}')
        cores=$(sysctl -n hw.ncpu)
    else
        load=$(uptime | awk -F'[a-z]:' '{ print $2 }' | awk -F',' '{print $1}' | tr -d ' ')
        cores=$(nproc 2>/dev/null || echo 1)
    fi

    load_per_core=$(echo "scale=2; $load / $cores" | bc -l 2>/dev/null)

    if (( $(echo "$load_per_core > 1" | bc -l 2>/dev/null) )); then
        echo -e "  ${yellow}System Load:${reset} $load (${load_per_core} per core) ${red}(High load, investigate)${reset}" > /tmp/system_info_load
    else
        echo -e "  ${yellow}System Load:${reset} $load (${load_per_core} per core)" > /tmp/system_info_load
    fi
}

check_memory_usage() {
    local memory_usage
    local total_memory
    if [[ "$os_type" == "OSX" ]]; then
        memory_usage=$(vm_stat | awk '/Pages active/ {print $3}' | sed 's/\.//')
        total_memory=$(sysctl hw.memsize | awk '{print $2}')
        memory_usage=$(echo "scale=2; $memory_usage * 4096 / $total_memory * 100" | bc -l 2>/dev/null)
    else
        memory_usage=$(free | awk '/Mem:/ {printf("%.2f", $3/$2 * 100.0)}')
    fi
    if (( $(echo "$memory_usage > 90" | bc -l 2>/dev/null) )); then
        echo -e "  ${yellow}Memory Usage:${reset} ${memory_usage}% ${red}(High usage, consider freeing up memory)${reset}" > /tmp/system_info_memory
    else
        echo -e "  ${yellow}Memory Usage:${reset} ${memory_usage}%" > /tmp/system_info_memory
    fi
}

check_disk_usage() {
    local disk_usage=$(df -h / | awk '/\// {print $(NF-1)}' | sed 's/%//')
    if (( disk_usage > 90 )); then
        echo -e "  ${yellow}Disk Usage:${reset} ${disk_usage}% ${red}(Low disk space, clean up files)${reset}" > /tmp/system_info_disk
    else
        echo -e "  ${yellow}Disk Usage:${reset} ${disk_usage}%" > /tmp/system_info_disk
    fi
}

check_ip_address() {
    local os_type=$(detect_shell_platform)
    local ip_address

    if [[ "$os_type" == "OSX" ]]; then
        ip_address=$(ipconfig getifaddr en0)
    elif [[ "$os_type" == "LINUX" ]]; then
        ip_address=$(ip route get 1 | awk '{print $7; exit}')
    else
        ip_address="Unable to determine on this platform"
    fi

    echo -e "  ${yellow}IP Address:${reset} $ip_address" > /tmp/system_info_ip
}

check_last_login() {
    local os_type=$(detect_shell_platform)
    local last_login

    if [[ "$os_type" == "OSX" ]]; then
        last_login=$(last -1 $USER | awk 'NR==1 { print $4, $5, $6, $7 }')
    elif [[ "$os_type" == "LINUX" ]]; then
        last_login=$(last -1 $USER | awk 'NR==1 {
            for (i=NF; i>0; i--) {
                if ($i ~ /:[0-9]+/) {
                    print $(i-3), $(i-2), $(i-1), $i
                    exit
                }
            }
            print $(NF-3), $(NF-2), $(NF-1), $NF
        }')
    else
        last_login="Unable to determine on this platform"
    fi

    echo -e "  ${yellow}Last Login:${reset} $last_login" > /tmp/system_info_login
}

check_uptime() {
    local os_type=$(detect_shell_platform)
    local uptime_str

    case "$os_type" in
        OSX)
            local boot_time=$(sysctl -n kern.boottime | awk '{print $4}' | sed 's/,//g')
            local current_time=$(date +%s)
            local uptime=$((current_time - boot_time))
            ;;
        LINUX)
            local uptime=$(cat /proc/uptime | awk '{print $1}')
            uptime=${uptime%.*}  # Remove decimal part
            ;;
        *)
            echo -e "  ${yellow}System Uptime:${reset} Unable to determine on this platform" > /tmp/system_info_uptime
            return
            ;;
    esac

    local days=$((uptime / 86400))
    local hours=$(((uptime % 86400) / 3600))
    local minutes=$(((uptime % 3600) / 60))

    echo -e "  ${yellow}System Uptime:${reset} ${days} days, ${hours} hours, ${minutes} minutes" > /tmp/system_info_uptime
}

check_cpu_temperature() {
    local temp
    if command -v osx-cpu-temp &> /dev/null; then
        temp=$(osx-cpu-temp | awk '{print $1}')
    else
        temp="N/A (install osx-cpu-temp)"
    fi
    if (( $(echo "$temp > 80" | bc -l 2>/dev/null) )); then
        echo -e "  ${yellow}CPU Temperature:${reset} ${temp}°C ${red}(High temperature, check cooling)${reset}" > /tmp/health_check_cpu
    else
        echo -e "  ${yellow}CPU Temperature:${reset} ${temp}°C" > /tmp/health_check_cpu
    fi
}

check_disk_health() {
    local disk_health=$(diskutil info disk0 | awk '/SMART Status/ {print $3}')
    if [[ "$disk_health" != "Verified" ]]; then
        echo -e "  ${yellow}Disk Health:${reset} $disk_health ${red}(Potential disk issues, backup data)${reset}" > /tmp/health_check_disk
    else
        echo -e "  ${yellow}Disk Health:${reset} $disk_health" > /tmp/health_check_disk
    fi
}

check_network_status() {
    local ping_result=$(ping -c 1 8.8.8.8 2>&1 | awk '/time=/ {print $7}' | cut -d'=' -f2)
    if [[ -n "$ping_result" ]]; then
        echo -e "  ${yellow}Network Status:${reset} Connected (Ping: ${ping_result}ms)" > /tmp/health_check_network
    else
        echo -e "  ${yellow}Network Status:${reset} ${red}Disconnected (Check network connection)${reset}" > /tmp/health_check_network
    fi
}

check_system_updates() {
    local updates=$(softwareupdate -l 2>&1 | grep -c "No new software available.")
    if [[ "$updates" -eq 0 ]]; then
        echo -e "  ${yellow}System Updates:${reset} ${red}Updates available (Run softwareupdate)${reset}" > /tmp/health_check_updates
    else
        echo -e "  ${yellow}System Updates:${reset} Up to date" > /tmp/health_check_updates
    fi
}

check_security() {
    local firewall_status=$(/usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate | awk '{print $7}')
    if [[ "$firewall_status" == "disabled" ]]; then
        echo -e "  ${yellow}Firewall Status:${reset} ${red}Disabled (Enable firewall for better security)${reset}" > /tmp/health_check_firewall
    else
        echo -e "  ${yellow}Firewall Status:${reset} Enabled" > /tmp/health_check_firewall
    fi
}

provide_recommendations() {
    local recommendations=()

    # Check for high memory usage
    local memory_usage=$(cat /tmp/system_info_memory 2>/dev/null | awk '{print $3}' | sed 's/%//')
    if [[ -n "$memory_usage" ]] && (( $(echo "$memory_usage > 90" | bc -l 2>/dev/null) )); then
        recommendations+=("- Consider closing unnecessary applications to free up memory.")
    fi

    # Check for high disk usage
    local disk_usage=$(cat /tmp/system_info_disk 2>/dev/null | awk '{print $3}' | sed 's/%//')
    if [[ -n "$disk_usage" ]] && (( disk_usage > 90 )); then
        recommendations+=("- Clean up unnecessary files or consider upgrading disk space.")
    fi

    # Check for system updates
    if grep -q "Updates available" /tmp/health_check_updates 2>/dev/null; then
        recommendations+=("- Install available system updates to improve security and performance.")
    fi

    # Check for disabled firewall
    if grep -q "Disabled" /tmp/health_check_firewall 2>/dev/null; then
        recommendations+=("- Enable the system firewall to enhance security.")
    fi

    # Display recommendations
    if [[ ${#recommendations[@]} -gt 0 ]]; then
        echo "Based on the health checks, here are some recommendations:"
        for rec in "${recommendations[@]}"; do
            echo -e "  ${green}$rec${reset}"
        done
    else
        echo -e "  ${green}Your system appears to be in good health. No specific recommendations at this time.${reset}"
    fi
}

# OSC 7 directory tracking
osc7_cwd() {
    local hostname=${HOST:-$(hostname)}
    local url="file://${hostname}${PWD}"
    printf '\e]7;%s\a' "${url}"
}

# Neovim tip of the day function
show_nvim_tip() {
    local tips=(
        "Use ,tt to open a new tab, ,tc to close it"
        "Navigate between windows with Ctrl+h/j/k/l"
        "Clear search highlighting with ,<Space>"
        ",e toggles the file explorer (Neo-tree)"
        ",ff opens fuzzy file finder (Telescope)"
        ",fg searches for text in files (live grep)"
        "Use ,vs to select Python virtual environment"
        ",db toggles debug breakpoint"
        ",du opens debug UI"
        ",so opens symbols outline"
        "gd jumps to definition"
        "K shows hover documentation"
        ",rn renames symbol under cursor"
        ",ca shows code actions"
        "gr shows references"
        ",f formats current buffer"
        "Use Ctrl-\\ to toggle floating terminal"
        "Tab accepts Copilot suggestion"
        "Alt-] and Alt-[ cycle through Copilot suggestions"
        "Shift-h and Shift-l navigate between tabs"
    )

    # Get a random tip
    local tip_index=$((RANDOM % ${#tips[@]} + 1))
    local tip="${tips[$tip_index]}"

    # Display the tip using gum if available, otherwise use regular echo
    if command -v gum >/dev/null 2>&1; then
        gum style \
            --border normal \
            --margin "1" \
            --padding "1" \
            --width 70 \
            "$(gum style --foreground 212 '💡 Neovim Tip of the Day:')" \
            "$(gum style --foreground 99 "$tip")"
    else
        echo "💡 Neovim Tip of the Day:"
        echo "$tip"
    fi
}
